{%- set data = pillar.cluster.configure.template.parameters %}
{%- set cloud_provider = grains['cloud_provider'] %}
{%- set drbd = salt['pillar.get']('drbd', default={}, merge=True) %}
{%- set nfsid = 1 %}

{%- if cloud_provider == "amazon-web-services" %}
{%- set native_fencing = data.native_fencing|default(True) %}
{%- set vip_mechanism = data.virtual_ip_mechanism|default("route") %}
{%- elif cloud_provider == "google-cloud-platform" %}
{%- set native_fencing = data.native_fencing|default(True) %}
{%- set vip_mechanism = data.virtual_ip_mechanism|default("load-balancer") %}
{%- elif cloud_provider == "microsoft-azure" %}
{%- set native_fencing = data.native_fencing|default(False) %}
{%- set vip_mechanism = data.virtual_ip_mechanism|default("load-balancer") %}
{%- else %}{# all other cases like openstack and libvirt #}
{%- set native_fencing = data.native_fencing|default(False) %}
{%- set vip_mechanism = data.virtual_ip_mechanism|default("vip-only") %}
{%- endif %}
{%- set cidr_netmask = "cidr_netmask="~data.virtual_ip_mask|default("32") %}
{%- set nic = "nic="~pillar.cluster.interface|json if pillar.cluster.interface is defined else "" %}

###########
# Defaults
###########

rsc_defaults \
  resource-stickiness="1000" \
  migration-threshold="5000"

op_defaults \
  timeout="600"

#####################################################
# Fencing agents - Native agents for cloud providers
#####################################################

{%- if native_fencing %}
  {%- if cloud_provider == "amazon-web-services" %}
    property $id="cib-bootstrap-options" \
      stonith-enabled="true" \
      stonith-action="off" \
      stonith-timeout="150s"

    primitive rsc_aws_stonith stonith:external/ec2 \
      params tag={{ data.instance_tag }} profile={{ data.cluster_profile }} \
      op start interval=0 timeout=180 \
      op stop interval=0 timeout=180 \
      op monitor interval=120 timeout=60 \
      meta target-role=Started

  {%- elif cloud_provider == "google-cloud-platform" %}
    property $id="cib-bootstrap-options" \
      stonith-enabled="true" \
      stonith-timeout="150s"

    # This stonith resource will be duplicated for each node in the cluster
    primitive rsc_gcp_stonith_{{ grains['host'] }} stonith:fence_gce \
      params plug={{ grains['gcp_instance_name'] }} pcmk_host_map="{{ grains['host'] }}:{{ grains['gcp_instance_name'] }}" \
      meta target-role=Started

  {%- elif cloud_provider == "microsoft-azure" %}
    property $id="cib-bootstrap-options" \
      stonith-enabled="true" \
      concurrent-fencing=true

    primitive rsc_azure_stonith stonith:fence_azure_arm \
      params subscriptionId={{ data.azure_subscription_id }} resourceGroup={{ data.azure_resource_group_name }} tenantId={{ data.azure_tenant_id }} login={{ data.azure_fence_agent_app_id }} passwd="{{ data.azure_fence_agent_client_secret }}" pcmk_monitor_retries=4 pcmk_action_limit=3 power_timeout=240 pcmk_reboot_timeout=900 \
      op monitor interval=3600 timeout=120 \
      meta target-role=Started
  {%- endif %}

{%- endif %}

##########################
# NFS Server resources
##########################

primitive nfsserver systemd:nfs-server \
  op monitor interval=30s

clone cl-nfsserver nfsserver \
  meta interleave=true

###########################
# Loop over DRBD resources
###########################
# Need to edit drbd pillar file.
{%- for res in drbd.resource %}

  ######################################
  # Floating IP address resource agents
  ######################################

  {%- if cloud_provider == "amazon-web-services" %}
    {%- if vip_mechanism == "route" %}
      primitive rsc_ip_{{ res.name }}_nfs ocf:suse:aws-vpc-move-ip \
        params ip={{ data.virtual_ip }} routing_table={{ data.route_table }} \
        interface={{ pillar.cluster.interface|default('eth0')|json }} profile={{ data.cluster_profile }} \
        op start interval=0 timeout=180 \
        op stop interval=0 timeout=180 \
        op monitor interval=60 timeout=60
    {%- endif %}

  {%- elif cloud_provider == "google-cloud-platform" %}

    {%- if vip_mechanism == "load-balancer" %}
      primitive rsc_socat_{{ res.name }}_nfs anything \
        params binfile="/usr/bin/socat" \
        cmdline_options="-U TCP-LISTEN:{{ data.probe }},backlog=10,fork,reuseaddr /dev/null" \
        op monitor timeout=20s interval=10 \
        op_params depth=0

    {%- elif vip_mechanism == "route" %}
      primitive rsc_ip_{{ res.name }}_nfs ocf:heartbeat:gcp-vpc-move-route \
        params ip={{ data.virtual_ip }} vpc_network={{ data.vpc_network_name }} route_name={{ data.route_name }} \
        op start interval=0 timeout=180 \
        op stop interval=0 timeout=180 \
        op monitor interval=60 timeout=60
    {%- endif %}

  {%- elif cloud_provider == "microsoft-azure" %}
    {%- if vip_mechanism == "load-balancer" %}
      primitive rsc_socat_{{ res.name }}_nfs azure-lb \
        params port={{ data.probe }} \
        op monitor timeout=20s interval=10 depth=0
    {%- endif %}

  {%- endif %}

  {%- if vip_mechanism == "vip-only" or vip_mechanism == "load-balancer" %}
    primitive rsc_ip_{{ res.name }}_nfs ocf:heartbeat:IPaddr2 \
      params ip={{ data.virtual_ip }} {{ cidr_netmask }} {{ nic }} \
      op monitor interval=10s timeout=20s
  {%- endif %}

  group g_ip_{{ res.name }}_nfs fs_{{ res.name }} rsc_ip_{{ res.name }}_nfs exportfs_work_{{ res.name }} \
    {%- if vip_mechanism == "load-balancer" %}
    rsc_socat_{{ res.name }}_nfs
    {%- endif %}

  order ord_drbd_{{ res.name }}-before-fs_{{ res.name }} \
    ms_{{ res.name }}:promote g_ip_{{ res.name }}_nfs:start

  colocation col_fs_{{ res.name }}-with_drbd_{{ res.name }} \
    inf: g_ip_{{ res.name }}_nfs ms_{{ res.name }}:Master\

  ##########################
  # DRBD resources
  ##########################

  primitive drbd_{{ res.name }} ocf:linbit:drbd \
    params drbd_resource={{ res.name }} \
    op monitor interval=15 role=Master \
    op monitor interval=30 role=Slave

  ms ms_{{ res.name }} drbd_{{ res.name }} \
    meta master-max=1 master-node-max=1 \
    meta clone-max={{ res.nodes | length }} clone-node-max=1 \
    meta notify=true target-role=Started

  primitive fs_{{ res.name }} ocf:heartbeat:Filesystem \
    params device={{ res.device }} directory={{ res.mount_point }} fstype={{ res.file_system }} \
    options=noatime,nodiratime \
    op monitor interval="20" timeout="40s"

  ##########################
  # NFS export resources
  ##########################

  primitive exportfs_work_{{ res.name }} exportfs \
    params directory={{ res.mount_point }} fsid={{ nfsid + loop.index0 }} \
    options="rw,no_root_squash" clientspec="*" wait_for_leasetime_on_stop=true \
    op monitor interval=30s

{%- endfor %}
